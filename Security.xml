<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Security</name>
    </assembly>
    <members>
        <member name="T:Security.Crypto.AES">
            <summary>
            Providing methods to encrypt and decrypt data using Advanced Encryption Standard (AES) / Rijndael 
            </summary>
        </member>
        <member name="M:Security.Crypto.AES.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypt an input string using provided key and iv with AES algorithm
            </summary>
            <param name="plainText">Data to encrypt</param>
            <param name="key">Key to encrypt</param>
            <param name="iv">Initialization Vector (IV)</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Security.Crypto.AES.Encrypt(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Encrypt an input string using random key and iv with AES algorithm
            </summary>
            <param name="plainText">Data to encrypt</param>
            <param name="key">Encrypt key</param>
            <param name="iv">Encrypt initialization vector (IV)</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Security.Crypto.AES.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt an encrypted byte array using provided key and iv with AES algorithm
            </summary>
            <param name="encryptedText">Byte array of encrypted text</param>
            <param name="key">Encrypt key</param>
            <param name="iv">Encrypt initialization vector (IV)</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="T:Security.Hash.Hash">
            <summary>
            Providing Common Hash Functions
            </summary>
        </member>
        <member name="M:Security.Hash.Hash.GetSHA256Hash(System.String)">
            <summary>
            Takes a string as input and returns it hashed by SHA256 algorithm as a string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Security.KeyGenerator.KeyGenerator">
            <summary>
            Providing Methods to Generate Passwords and Keys
            </summary>
        </member>
        <member name="M:Security.KeyGenerator.KeyGenerator.GeneratePassword(System.Int32,System.Boolean)">
            <summary>
            Generate Random Password
            </summary>
            <param name="length">Password Length (should be equal or greater than 8)</param>
            <param name="containAmbiguous">Wheter to include ambiguous characters ({}[]()/\'"`~,;:.&lt;&gt;) in password or not</param>
            <returns>Random Password</returns>
        </member>
        <member name="M:Security.KeyGenerator.KeyGenerator.GenerateKey(System.Int32)">
            <summary>
            Generate Random Byte Sequence
            </summary>
            <param name="length">Key Bytes Number</param>
            <returns>Array</returns>
        </member>
        <member name="T:Security.Utilities.Arrays">
            <summary>
            Providing Helper Methods To Manipulate Arrays
            </summary>
        </member>
        <member name="M:Security.Utilities.Arrays.ShuffleArray``1(``0[])">
            <summary>
            Shuffle an Array Based on Fisher–Yates Modern Algorithm
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Security.Utilities.Arrays.ShuffleString(System.String)">
            <summary>
            Shuffle a String Based on Fisher–Yates Modern Algorithm
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
    </members>
</doc>
